<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cocoon-orm</name>
    </assembly>
    <members>
        <member name="T:Cocoon.ORM.OverrideName">
            <summary>
            Overwrites the name of an object
            </summary>
        </member>
        <member name="M:Cocoon.ORM.OverrideName.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Cocoon.ORM.Table">
            <summary>
            Defines a table model
            </summary>
        </member>
        <member name="T:Cocoon.ORM.Column">
            <summary>
            Defines a column in a table model
            </summary>
        </member>
        <member name="T:Cocoon.ORM.ForeignColumn">
            <summary>
            Defines a column that exists in another table model that should be joined to ths table model
            </summary>
        </member>
        <member name="F:Cocoon.ORM.ForeignColumn.KeyInThisTableModel">
            <summary>
            The name of the foreign key column in this table
            </summary>
        </member>
        <member name="F:Cocoon.ORM.ForeignColumn.KeyInOtherTableModel">
            <summary>
            The name of the primary key column in the other table
            </summary>
        </member>
        <member name="F:Cocoon.ORM.ForeignColumn.FieldInOtherTableModel">
            <summary>
            Field to select in the other table
            </summary>
        </member>
        <member name="M:Cocoon.ORM.ForeignColumn.#ctor(System.String,System.Type,System.String,System.String,Cocoon.ORM.JoinType)">
            <summary>
            Defines a column that exists in another table model that should be joined to ths table model
            </summary>
            <param name="KeyInThisTableModel">The name of the foreign key column in this table</param>
            <param name="OtherTableModel">The type of the other table model</param>
            <param name="FieldInOtherTableModel">Field to select in the other table</param>
            <param name="KeyInOtherTableModel">The name of the primary key column in the other table</param>
            <param name="JoinType">The type of join to perform</param>
        </member>
        <member name="T:Cocoon.ORM.PrimaryKey">
            <summary>
            Defines a column to be a primary key
            </summary>
        </member>
        <member name="T:Cocoon.ORM.IgnoreOnUpdate">
            <summary>
            Tells Cocoon to ignore this column during updates
            </summary>
        </member>
        <member name="T:Cocoon.ORM.IgnoreOnInsert">
            <summary>
            Tells Cocoon to ignore this column during inserts
            </summary>
        </member>
        <member name="T:Cocoon.ORM.IgnoreOnSelect">
            <summary>
            Tells to ignore this column on selects
            </summary>
        </member>
        <member name="T:Cocoon.ORM.JoinType">
            <summary>
            Defines a type of join
            </summary>
        </member>
        <member name="F:Cocoon.ORM.JoinType.LEFT">
            <summary>
            Left join
            </summary>
        </member>
        <member name="F:Cocoon.ORM.JoinType.INNER">
            <summary>
            Inner join
            </summary>
        </member>
        <member name="F:Cocoon.ORM.JoinType.RIGHT">
            <summary>
            Right join
            </summary>
        </member>
        <member name="F:Cocoon.ORM.JoinType.FULL_OUTER">
            <summary>
            Full outer join
            </summary>
        </member>
        <member name="T:Cocoon.ORM.PredicateBuilder">
            <summary>
            Builds a dynamic expression
            </summary>
        </member>
        <member name="M:Cocoon.ORM.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            OR expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1"></param>
            <param name="expr2"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            AND expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1"></param>
            <param name="expr2"></param>
            <returns></returns>
        </member>
        <member name="T:Cocoon.ORM.CocoonORM">
            <summary>
            Database connection
            </summary>
        </member>
        <member name="F:Cocoon.ORM.CocoonORM.ConnectionString">
            <summary>
            The connection string in use by Cocoon
            </summary>
        </member>
        <member name="F:Cocoon.ORM.CocoonORM.CommandTimeout">
            <summary>
            The default timeout in miliseconds of queries
            </summary>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString">The connection string of the database to connect to</param>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Ping(System.Int32)">
            <summary>
            Pings the database to determine connectivity
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Returns a list of objects
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="where">Where expression to use for the query</param>
            <param name="top">Maximum number of rows to return</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>A list of type T with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.GetList``1(System.Type,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Returns a list of objects
            </summary>
            <typeparam name="T">Table model to return and to use in the where clause</typeparam>
            <param name="model">Table model type</param>
            <param name="where">Where expression to use for the query</param>
            <param name="top">Maximum number of rows to return</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>List of objects with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.GetSingle``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Returns a single row
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>An object of type T with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.GetScalar``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="ModelT">Table model to return and to use in the where clause</typeparam>
            <typeparam name="FieldT">Type of the field to select in the model</typeparam>
            <param name="fieldToSelect">Expression pick the field in the model to select</param>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The value of the selected field</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.GetScalarList``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Returns a list of scalars
            </summary>
            <typeparam name="ModelT">Table model to return and to use in the where clause</typeparam>
            <typeparam name="FieldT">Type of the field to select in the model</typeparam>
            <param name="fieldToSelect">Expression pick the field in the model to select</param>
            <param name="where">Where expression to use for the query</param>
            <param name="top">Maximum number of rows to return</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>List of values for the selected field</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Deletes records from a table
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The number of records that were affected</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Updates records in a table
            </summary>
            <typeparam name="T">Table model to use in the where clause</typeparam>
            <param name="objectToUpdate">Object to update in the database. The table model is inferred from the Type of this object.</param>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The number of records that were affected</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Update``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Updates records in a table
            </summary>
            <typeparam name="T">Table model to use in the where clause</typeparam>
            <param name="objectToUpdate">Object to update in the table. The table model is inferred from the Type of this object.</param>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The number of records that were affected</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.UpdatePartial``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Updates a subset of fields in a table
            </summary>
            <typeparam name="T">Table model to use in the where clause</typeparam>
            <param name="fieldsToUpdate">An object containg the fields/values to update</param>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The number of records that were affected</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Insert``1(System.Object,System.Int32)">
            <summary>
            Inserts a single row into a table
            </summary>
            <typeparam name="T">Table model to use in the where clause and return</typeparam>
            <param name="objectToInsert">Object to insert into the table The table model is inferred from the Type of this object.</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The newly inserted object of type T</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Insert``1(``0,System.Int32)">
            <summary>
            Inserts a single object
            </summary>
            <typeparam name="T">Table model to use in the where clause and return</typeparam>
            <param name="objectToInsert">Object to insert into the table The table model is inferred from the Type of this object.</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The newly inserted object of type T</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Inserts a list of objects
            </summary>
            <typeparam name="T">Table model to use in the where clause and return</typeparam>
            <param name="objectsToInsert">Objects to insert into the database</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The newly inserted objects of type T</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Returns the number of rows that exist for a query
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The number of rows</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Checksum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Returns a binary checksum on a query
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="where">Where expression to use for the query</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>An integer checksum hash</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines of rows exist
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="where">Where expression to use for the query</param>
            <returns>True if rows exists, False otherwise</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Copy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32)">
            <summary>
            Copies rows into the same table
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="where">Where expression to use for the query</param>
            <param name="overrideValues"></param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The newly inserted rows</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteSQLList``1(System.String,System.Object,System.Int32)">
            <summary>
            Executes a SQL statement for a list of rows
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="sql">SQL statement string</param>
            <param name="parameters">Object containing the parameters of the query. Members of this object that match @Parameter variables in the SQL will be parameterized.</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>A list of type T with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteSQLSingle``1(System.String,System.Object,System.Int32)">
            <summary>
            Executes a SQL statement for a single row
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="sql">SQL statement string</param>
            <param name="parameters">Object containing the parameters of the query. Members of this object that match @Parameter variables in the SQL will be parameterized.</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>An object of type T with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteSQLVoid(System.String,System.Object,System.Int32)">
            <summary>
            Executes a SQL statement with no sesult
            </summary>
            <param name="sql">SQL statement string</param>
            <param name="parameters">Object containing the parameters of the query. Members of this object that match @Parameter variables in the SQL will be parameterized.</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The number of records affected by the query</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteSQLDataSet(System.String,System.Object,System.Int32)">
            <summary>
            Executes a SQL statement for DataSet
            </summary>
            <param name="sql">SQL statement string</param>
            <param name="parameters">Object containing the parameters of the query. Members of this object that match @Parameter variables in the SQL will be parameterized.</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>A DataSet with the result of the query</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteProcList``1(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="procedureName">The name of the procedure to execute</param>
            <param name="parameters">An object containing the parameters of the stored procedure</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>A list of type T with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteProcSingle``1(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T">Table model</typeparam>
            <param name="procedureName">The name of the procedure to execute</param>
            <param name="parameters">An object containing the parameters of the stored procedure</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>An object of type T with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteProcVoid(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="procedureName">The name of the procedure to execute</param>
            <param name="parameters">An object containing the parameters of the stored procedure</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ExecuteProcDataSet(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="procedureName">The name of the procedure to execute</param>
            <param name="parameters">An object containing the parameters of the stored procedure</param>
            <param name="timeout">Timeout in milliseconds of query</param>
            <returns>A DataSet with the result</returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.ChangeType(System.Object,System.Type)">
            <summary>
            Changes the type of an object
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.GenerateSequentialGuid">
            <summary>
            Generates a sequential COMB GUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.GenerateSequentialUID">
            <summary>
            Generates a sequential Base36 unique identifier
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Base36Decode(System.String)">
            <summary>
            Base36 decodes a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.Base36Encode(System.Int64)">
            <summary>
            Base36 encodes a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines of the member has a custom attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.HasAttribute``1(System.Type)">
            <summary>
            Determines of a class has a custom attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.FillScalarList``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            Creates a list of scalars from a single field from a list of rows
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <param name="fieldToMap"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.FillScalarList``1(System.Data.DataTable,System.String)">
            <summary>
            Creates a list of scalars from a single field from a DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fieldToMap"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.FillList(System.Type,System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Fills a list from a list of rows
            </summary>
            <param name="type"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.FillList(System.Type,System.Data.DataTable)">
            <summary>
            Fills a list from a DataTable
            </summary>
            <param name="type"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.FillList``1(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Fills a list from a list of rows
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.FillList``1(System.Data.DataTable)">
            <summary>
            Fills a list from a DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.SetFromRow(System.Object,System.Data.DataRow)">
            <summary>
            Sets a properties of an object from a DataRow
            </summary>
            <param name="objectToSet"></param>
            <param name="row"></param>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.SetFromReader(System.Object,System.Data.IDataReader)">
            <summary>
            Sets the properties of an object from a DataReader
            </summary>
            <param name="objectToSet"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.SHA256(System.String)">
            <summary>
            Creates an SHA256 hash of a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.CocoonORM.MD5(System.String)">
            <summary>
            Creates an MD5 hash of a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Cocoon.ORM.ConnectionStringParser">
            <summary>
            Parses a connection string into its parts
            </summary>
        </member>
        <member name="M:Cocoon.ORM.ConnectionStringParser.GetPassword(System.String)">
            <summary>
            Gets the password of the connection string
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.ConnectionStringParser.GetUsername(System.String)">
            <summary>
            Gets the username of the connection string
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.ConnectionStringParser.GetDatabaseName(System.String)">
            <summary>
            Gets the database name of the connection string
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Cocoon.ORM.ConnectionStringParser.GetServerName(System.String)">
            <summary>
            Gets the server name of the connection string
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
    </members>
</doc>
